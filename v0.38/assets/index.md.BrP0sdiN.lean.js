import{_ as t,c as a,o as i,aA as l}from"./chunks/framework.B31RDjp2.js";const p=JSON.parse('{"title":"Introduction","description":"","frontmatter":{"layout":"home","hero":{"name":"QuantumToolbox.jl","tagline":"A pure Julia framework designed for high-performance quantum physics simulations","image":{"src":"/logo.png","alt":"QuantumToolbox"},"actions":[{"theme":"brand","text":"Getting Started","link":"/getting_started/brief_example"},{"theme":"alt","text":"Users Guide","link":"/users_guide/QuantumObject/QuantumObject"},{"theme":"alt","text":"Tutorials","link":"https://qutip.org/qutip-julia-tutorials/"},{"theme":"alt","text":"API","link":"/resources/api"},{"theme":"alt","text":"Cite us","link":"/getting_started/cite"},{"theme":"alt","text":"View on Github","link":"https://github.com/qutip/QuantumToolbox.jl"},{"theme":"alt","text":"Visit QuTiP.org","link":"https://qutip.org/"}]},"features":[{"icon":"<img width=\\"64\\" height=\\"64\\" src=\\"https://docs.sciml.ai/DiffEqDocs/stable/assets/logo.png\\" alt=\\"markdown\\"/>","title":"Dynamical Evolution","details":"Advanced solvers for time evolution of quantum systems, thanks to the powerful DifferentialEquations.jl package.","link":"/users_guide/time_evolution/intro"},{"icon":"<img width=\\"64\\" height=\\"64\\" src=\\"https://cuda.juliagpu.org/stable/assets/logo.png\\" />","title":"GPU Computing","details":"Leverage GPU resources for high-performance computing. Simulate quantum dynamics directly on the GPU with the same syntax as the CPU case.","link":"/users_guide/extensions/cuda"},{"icon":"<img width=\\"64\\" height=\\"64\\" src=\\"https://img.icons8.com/?size=100&id=1W4Bkj363ov0&format=png&color=000000\\" />","title":"Distributed Computing","details":"Distribute the computation over multiple nodes (e.g., a cluster). Simulate hundreds of quantum trajectories in parallel on a cluster, with, again, the same syntax as the simple case.","link":"/users_guide/cluster"},{"icon":"<img width=\\"64\\" height=\\"64\\" src=\\"https://raw.githubusercontent.com/JuliaDiff/DifferentiationInterface.jl/main/DifferentiationInterface/docs/src/assets/logo.svg\\" />","title":"Differentiable Programming","details":"Enable gradient-based optimization for quantum algorithms. Compute gradients of quantum dynamics with respect to their parameters using automatic differentiation.","link":"/users_guide/autodiff"}]},"headers":[],"relativePath":"index.md","filePath":"index.md","lastUpdated":null}'),o={name:"index.md"};function s(r,e,n,u,c,h){return i(),a("div",null,[...e[0]||(e[0]=[l("",15)])])}const g=t(o,[["render",s]]);export{p as __pageData,g as default};
