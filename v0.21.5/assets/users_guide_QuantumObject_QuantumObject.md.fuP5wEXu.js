import{_ as l,c as t,a5 as e,j as s,a as i,o as n}from"./chunks/framework.QrEWS6UZ.js";const P=JSON.parse('{"title":"Quantum Objects (Qobj)","description":"","frontmatter":{},"headers":[],"relativePath":"users_guide/QuantumObject/QuantumObject.md","filePath":"users_guide/QuantumObject/QuantumObject.md","lastUpdated":null}'),p={name:"users_guide/QuantumObject/QuantumObject.md"},o={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},d={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"0"},xmlns:"http://www.w3.org/2000/svg",width:"1.928ex",height:"1.545ex",role:"img",focusable:"false",viewBox:"0 -683 852 683","aria-hidden":"true"},h={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},r={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"0"},xmlns:"http://www.w3.org/2000/svg",width:"1.726ex",height:"1.545ex",role:"img",focusable:"false",viewBox:"0 -683 763 683","aria-hidden":"true"},c={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},u={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"0"},xmlns:"http://www.w3.org/2000/svg",width:"1.636ex",height:"1.545ex",role:"img",focusable:"false",viewBox:"0 -683 723 683","aria-hidden":"true"},k={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},m={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.471ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.724ex",height:"1.446ex",role:"img",focusable:"false",viewBox:"0 -431 1204.1 639","aria-hidden":"true"},g={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},Q={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.471ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.724ex",height:"1.446ex",role:"img",focusable:"false",viewBox:"0 -431 1204.1 639","aria-hidden":"true"},b={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},T={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.357ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.49ex",height:"1.952ex",role:"img",focusable:"false",viewBox:"0 -705 1100.5 862.8","aria-hidden":"true"},y={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},v={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.667ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.359ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -705 1042.5 1000","aria-hidden":"true"},x={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},E={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.357ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.319ex",height:"1.952ex",role:"img",focusable:"false",viewBox:"0 -705 1024.8 862.8","aria-hidden":"true"},C={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},f={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.471ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.819ex",height:"2.066ex",role:"img",focusable:"false",viewBox:"0 -705 1246.1 913","aria-hidden":"true"},w={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},j={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.471ex"},xmlns:"http://www.w3.org/2000/svg",width:"2.819ex",height:"2.066ex",role:"img",focusable:"false",viewBox:"0 -705 1246.1 913","aria-hidden":"true"},F={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},B={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.667ex"},xmlns:"http://www.w3.org/2000/svg",width:"10.939ex",height:"2.364ex",role:"img",focusable:"false",viewBox:"0 -750 4835.1 1045","aria-hidden":"true"},M={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},D={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"8.175ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 3613.4 1000","aria-hidden":"true"},A={class:"MathJax",jax:"SVG",style:{direction:"ltr",position:"relative"}},S={style:{overflow:"visible","min-height":"1px","min-width":"1px","vertical-align":"-0.566ex"},xmlns:"http://www.w3.org/2000/svg",width:"4.781ex",height:"2.262ex",role:"img",focusable:"false",viewBox:"0 -750 2113 1000","aria-hidden":"true"};function H(O,a,L,z,V,Z){return n(),t("div",null,[a[76]||(a[76]=e(`<h1 id="doc:Qobj" tabindex="-1">Quantum Objects (Qobj) <a class="header-anchor" href="#doc:Qobj" aria-label="Permalink to &quot;Quantum Objects (Qobj) {#doc:Qobj}&quot;">​</a></h1><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to &quot;Introduction&quot;">​</a></h2><p>The key difference between classical and quantum mechanics is the use of operators instead of numbers as variables. Moreover, we need to specify state vectors and their properties. Therefore, in computing the dynamics of quantum systems, we need a data structure that encapsulates the properties of a quantum operator and ket/bra vectors. The quantum object structure, <a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.QuantumObject"><code>QuantumObject</code></a>, accomplishes this using array representation.</p><p><a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.QuantumObject"><code>QuantumObject</code></a> supports general <code>Julia</code> arrays (<code>Base.AbstractArray</code>). For example, it can be:</p><ul><li><p><code>Base.Vector</code> (dense vector)</p></li><li><p><code>Base.Matrix</code> (dense matrix)</p></li><li><p><code>SparseArrays.SparseVector</code> (sparse vector)</p></li><li><p><code>SparseArrays.SparseMatrixCSC</code> (sparse matrix)</p></li><li><p><code>CUDA.CuArray</code> (dense GPU vector / matrix)</p></li><li><p><code>CUDA.CUSPARSE.CuSparseVector</code> (sparse GPU vector)</p></li><li><p><code>CUDA.CUSPARSE.CuSparseMatrixCSC</code> (sparse GPU matrix)</p></li><li><p><code>CUDA.CUSPARSE.CuSparseMatrixCSR</code> (sparse GPU matrix)</p></li><li><p>and even more ...</p></li></ul><div class="tip custom-block"><p class="custom-block-title">Support for GPU arrays</p><p>See <a href="/QuantumToolbox.jl/v0.21.5/users_guide/extensions/cuda#doc:CUDA">CUDA extension</a> for more details.</p></div><p>We can create a <a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.QuantumObject"><code>QuantumObject</code></a> with a user defined data set by passing an array of data into the <a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.QuantumObject"><code>QuantumObject</code></a>:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">QuantumObject</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Quantum Object:   type=Ket   dims=[5]   size=(5,)</span></span>
<span class="line"><span>5-element Vector{Int64}:</span></span>
<span class="line"><span> 1</span></span>
<span class="line"><span> 2</span></span>
<span class="line"><span> 3</span></span>
<span class="line"><span> 4</span></span>
<span class="line"><span> 5</span></span></code></pre></div><p>We can also use the same function <a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.Qobj"><code>Qobj</code></a> in <a href="https://github.com/qutip/qutip" target="_blank" rel="noreferrer"><code>QuTiP</code> (<code>Python</code>)</a>:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Qobj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Quantum Object:   type=Ket   dims=[5]   size=(5,)</span></span>
<span class="line"><span>5-element Vector{Int64}:</span></span>
<span class="line"><span> 1</span></span>
<span class="line"><span> 2</span></span>
<span class="line"><span> 3</span></span>
<span class="line"><span> 4</span></span>
<span class="line"><span> 5</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Qobj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Quantum Object:   type=Bra   dims=[5]   size=(1, 5)</span></span>
<span class="line"><span>1×5 Matrix{Int64}:</span></span>
<span class="line"><span> 1  2  3  4  5</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Qobj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Quantum Object:   type=Operator   dims=[4]   size=(4, 4)   ishermitian=false</span></span>
<span class="line"><span>4×4 Matrix{Float64}:</span></span>
<span class="line"><span> 0.286907  0.229467  0.0802044  0.43368</span></span>
<span class="line"><span> 0.952928  0.612991  0.583054   0.0567776</span></span>
<span class="line"><span> 0.598388  0.676152  0.722131   0.28865</span></span>
<span class="line"><span> 0.601969  0.256873  0.158038   0.237637</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">M </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ComplexF64, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Qobj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(M, dims </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># dims as Vector</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Qobj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(M, dims </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># dims as Tuple (recommended)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Qobj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(M, dims </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># dims as StaticArrays.SVector (recommended)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Quantum Object:   type=Operator   dims=[2, 2]   size=(4, 4)   ishermitian=false</span></span>
<span class="line"><span>4×4 Matrix{ComplexF64}:</span></span>
<span class="line"><span> 0.0496949+0.794675im  0.00627228+0.716694im   …  0.436399+0.55959im</span></span>
<span class="line"><span>  0.914318+0.591996im    0.729895+0.500757im      0.545592+0.703488im</span></span>
<span class="line"><span>  0.667913+0.666546im    0.931186+0.0387662im      0.48264+0.671331im</span></span>
<span class="line"><span>  0.477554+0.9381im      0.318817+0.839103im      0.268256+0.0228276im</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">Beware of type-stability!</p><p>Please note that here we put the <code>dims</code> as a tuple <code>(2, 2)</code>. Although it supports also <code>Vector</code> type (<code>dims = [2, 2]</code>), it is recommended to use <code>Tuple</code> or <code>SVector</code> from <a href="https://github.com/JuliaArrays/StaticArrays.jl" target="_blank" rel="noreferrer"><code>StaticArrays.jl</code></a> to improve performance. For a brief explanation on the impact of the type of <code>dims</code>, see the Section <a href="/QuantumToolbox.jl/v0.21.5/getting_started/type_stability#doc:Type-Stability">The Importance of Type-Stability</a>.</p></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Qobj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rand</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), type </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SuperOperator)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Quantum Object:   type=SuperOperator   dims=[2]   size=(4, 4)</span></span>
<span class="line"><span>4×4 Matrix{Float64}:</span></span>
<span class="line"><span> 0.271073  0.56506   0.0522099  0.609786</span></span>
<span class="line"><span> 0.601849  0.125086  0.258841   0.9559</span></span>
<span class="line"><span> 0.666835  0.643414  0.416462   0.200307</span></span>
<span class="line"><span> 0.38344   0.660736  0.272651   0.470809</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Difference between <code>dims</code> and <code>size</code></p><p>Notice that <code>type</code>, <code>dims</code>, and <code>size</code> will change according to the input <code>data</code>. Although <code>dims</code> and <code>size</code> appear to be the same, <code>dims</code> keep tracking the dimension of individual Hilbert spaces of a multipartite system, while <code>size</code> does not. We refer the reader to the section <a href="/QuantumToolbox.jl/v0.21.5/users_guide/tensor#doc:Tensor-products-and-Partial-Traces">Tensor Products and Partial Traces</a> for more information.</p></div><h2 id="States-and-operators" tabindex="-1">States and operators <a class="header-anchor" href="#States-and-operators" aria-label="Permalink to &quot;States and operators {#States-and-operators}&quot;">​</a></h2><p>Manually specifying the data for each quantum object is inefficient. Even more so when most objects correspond to commonly used types such as the ladder operators of a harmonic oscillator, the Pauli spin operators for a two-level system, or state vectors such as Fock states. Therefore, <code>QuantumToolbox</code> includes predefined functions to construct variety of states and operators (you can click the function links and see the corresponding docstring):</p><h3 id="states" tabindex="-1">States <a class="header-anchor" href="#states" aria-label="Permalink to &quot;States&quot;">​</a></h3><ul><li><p><a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.zero_ket"><code>zero_ket</code></a>: zero ket vector</p></li><li><p><a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.fock"><code>fock</code></a> or <a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.basis"><code>basis</code></a>: fock state ket vector</p></li><li><p><a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.fock_dm"><code>fock_dm</code></a>: density matrix of a fock state</p></li><li><p><a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.coherent"><code>coherent</code></a>: coherent state ket vector</p></li><li><p><a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.rand_ket"><code>rand_ket</code></a>: random ket vector</p></li><li><p><a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.coherent_dm"><code>coherent_dm</code></a>: density matrix of a coherent state</p></li><li><p><a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.thermal_dm"><code>thermal_dm</code></a>: density matrix of a thermal state</p></li><li><p><a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.maximally_mixed_dm"><code>maximally_mixed_dm</code></a>: density matrix of a maximally mixed state</p></li><li><p><a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.rand_dm"><code>rand_dm</code></a>: random density matrix</p></li><li><p><a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.spin_state"><code>spin_state</code></a>: spin state</p></li><li><p><a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.spin_coherent"><code>spin_coherent</code></a>: coherent spin state</p></li><li><p><a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.bell_state"><code>bell_state</code></a>: Bell state</p></li><li><p><a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.singlet_state"><code>singlet_state</code></a>: two particle singlet state</p></li><li><p><a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.triplet_states"><code>triplet_states</code></a>: list of the two particle triplet states</p></li><li><p><a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.w_state"><code>w_state</code></a>: <code>n</code>-qubit W-state</p></li><li><p><a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.ghz_state"><code>ghz_state</code></a>: <code>n</code>-qudit GHZ state</p></li></ul><h3 id="operators" tabindex="-1">Operators <a class="header-anchor" href="#operators" aria-label="Permalink to &quot;Operators&quot;">​</a></h3>`,27)),s("ul",null,[a[61]||(a[61]=e('<li><p><a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.eye"><code>eye</code></a> or <a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.qeye"><code>qeye</code></a>: identity operator</p></li><li><p><a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.destroy"><code>destroy</code></a>: lowering (destruction) operator</p></li><li><p><a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.create"><code>create</code></a>: raising (creation) operator</p></li><li><p><a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.projection"><code>projection</code></a>: projection operator</p></li><li><p><a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.displace"><code>displace</code></a>: displacement operator</p></li><li><p><a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.squeeze"><code>squeeze</code></a>: single-mode squeeze operator</p></li><li><p><a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.num"><code>num</code></a>: bosonic number operator</p></li><li><p><a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.phase"><code>phase</code></a>: single-mode Pegg-Barnett phase operator</p></li><li><p><a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.position"><code>QuantumToolbox.position</code></a>: position operator</p></li><li><p><a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.momentum"><code>QuantumToolbox.momentum</code></a>: momentum operator</p></li><li><p><a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.rand_unitary"><code>rand_unitary</code></a>: random unitary operator</p></li>',11)),s("li",null,[s("p",null,[a[2]||(a[2]=s("a",{href:"/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.sigmax"},[s("code",null,"sigmax")],-1)),a[3]||(a[3]=i(": Pauli-")),s("mjx-container",o,[(n(),t("svg",d,a[0]||(a[0]=[s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D44B",d:"M42 0H40Q26 0 26 11Q26 15 29 27Q33 41 36 43T55 46Q141 49 190 98Q200 108 306 224T411 342Q302 620 297 625Q288 636 234 637H206Q200 643 200 645T202 664Q206 677 212 683H226Q260 681 347 681Q380 681 408 681T453 682T473 682Q490 682 490 671Q490 670 488 658Q484 643 481 640T465 637Q434 634 411 620L488 426L541 485Q646 598 646 610Q646 628 622 635Q617 635 609 637Q594 637 594 648Q594 650 596 664Q600 677 606 683H618Q619 683 643 683T697 681T738 680Q828 680 837 683H845Q852 676 852 672Q850 647 840 637H824Q790 636 763 628T722 611T698 593L687 584Q687 585 592 480L505 384Q505 383 536 304T601 142T638 56Q648 47 699 46Q734 46 734 37Q734 35 732 23Q728 7 725 4T711 1Q708 1 678 1T589 2Q528 2 496 2T461 1Q444 1 444 10Q444 11 446 25Q448 35 450 39T455 44T464 46T480 47T506 54Q523 62 523 64Q522 64 476 181L429 299Q241 95 236 84Q232 76 232 72Q232 53 261 47Q262 47 267 47T273 46Q276 46 277 46T280 45T283 42T284 35Q284 26 282 19Q279 6 276 4T261 1Q258 1 243 1T201 2T142 2Q64 2 42 0Z",style:{"stroke-width":"3"}})])])],-1)]))),a[1]||(a[1]=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"X")])],-1))]),a[4]||(a[4]=i(" operator"))])]),s("li",null,[s("p",null,[a[7]||(a[7]=s("a",{href:"/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.sigmay"},[s("code",null,"sigmay")],-1)),a[8]||(a[8]=i(": Pauli-")),s("mjx-container",h,[(n(),t("svg",r,a[5]||(a[5]=[s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D44C",d:"M66 637Q54 637 49 637T39 638T32 641T30 647T33 664T42 682Q44 683 56 683Q104 680 165 680Q288 680 306 683H316Q322 677 322 674T320 656Q316 643 310 637H298Q242 637 242 624Q242 619 292 477T343 333L346 336Q350 340 358 349T379 373T411 410T454 461Q546 568 561 587T577 618Q577 634 545 637Q528 637 528 647Q528 649 530 661Q533 676 535 679T549 683Q551 683 578 682T657 680Q684 680 713 681T746 682Q763 682 763 673Q763 669 760 657T755 643Q753 637 734 637Q662 632 617 587Q608 578 477 424L348 273L322 169Q295 62 295 57Q295 46 363 46Q379 46 384 45T390 35Q390 33 388 23Q384 6 382 4T366 1Q361 1 324 1T232 2Q170 2 138 2T102 1Q84 1 84 9Q84 14 87 24Q88 27 89 30T90 35T91 39T93 42T96 44T101 45T107 45T116 46T129 46Q168 47 180 50T198 63Q201 68 227 171L252 274L129 623Q128 624 127 625T125 627T122 629T118 631T113 633T105 634T96 635T83 636T66 637Z",style:{"stroke-width":"3"}})])])],-1)]))),a[6]||(a[6]=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"Y")])],-1))]),a[9]||(a[9]=i(" operator"))])]),s("li",null,[s("p",null,[a[12]||(a[12]=s("a",{href:"/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.sigmaz"},[s("code",null,"sigmaz")],-1)),a[13]||(a[13]=i(": Pauli-")),s("mjx-container",c,[(n(),t("svg",u,a[10]||(a[10]=[s("g",{stroke:"currentColor",fill:"currentColor","stroke-width":"0",transform:"scale(1,-1)"},[s("g",{"data-mml-node":"math"},[s("g",{"data-mml-node":"mi"},[s("path",{"data-c":"1D44D",d:"M58 8Q58 23 64 35Q64 36 329 334T596 635L586 637Q575 637 512 637H500H476Q442 637 420 635T365 624T311 598T266 548T228 469Q227 466 226 463T224 458T223 453T222 450L221 448Q218 443 202 443Q185 443 182 453L214 561Q228 606 241 651Q249 679 253 681Q256 683 487 683H718Q723 678 723 675Q723 673 717 649Q189 54 188 52L185 49H274Q369 50 377 51Q452 60 500 100T579 247Q587 272 590 277T603 282H607Q628 282 628 271Q547 5 541 2Q538 0 300 0H124Q58 0 58 8Z",style:{"stroke-width":"3"}})])])],-1)]))),a[11]||(a[11]=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mi",null,"Z")])],-1))]),a[14]||(a[14]=i(" operator"))])]),s("li",null,[s("p",null,[a[17]||(a[17]=s("a",{href:"/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.sigmap"},[s("code",null,"sigmap")],-1)),a[18]||(a[18]=i(": Pauli ladder (")),s("mjx-container",k,[(n(),t("svg",m,a[15]||(a[15]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(604,-150) scale(0.707)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width:3;"></path></g></g></g></g>',1)]))),a[16]||(a[16]=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msub",null,[s("mi",null,"σ"),s("mo",null,"+")])])],-1))]),a[19]||(a[19]=i(") operator"))])]),s("li",null,[s("p",null,[a[22]||(a[22]=s("a",{href:"/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.sigmam"},[s("code",null,"sigmam")],-1)),a[23]||(a[23]=i(": Pauli ladder (")),s("mjx-container",g,[(n(),t("svg",Q,a[20]||(a[20]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D70E" d="M184 -11Q116 -11 74 34T31 147Q31 247 104 333T274 430Q275 431 414 431H552Q553 430 555 429T559 427T562 425T565 422T567 420T569 416T570 412T571 407T572 401Q572 357 507 357Q500 357 490 357T476 358H416L421 348Q439 310 439 263Q439 153 359 71T184 -11ZM361 278Q361 358 276 358Q152 358 115 184Q114 180 114 178Q106 141 106 117Q106 67 131 47T188 26Q242 26 287 73Q316 103 334 153T356 233T361 278Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(604,-150) scale(0.707)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g></g></g></g>',1)]))),a[21]||(a[21]=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msub",null,[s("mi",null,"σ"),s("mo",null,"−")])])],-1))]),a[24]||(a[24]=i(") operator"))])]),a[62]||(a[62]=s("li",null,[s("p",null,[s("a",{href:"/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.jmat"},[s("code",null,"jmat")]),i(": high-order Spin-"),s("code",null,"j"),i(" operator")])],-1)),s("li",null,[s("p",null,[a[27]||(a[27]=s("a",{href:"/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.spin_Jx"},[s("code",null,"spin_Jx")],-1)),a[28]||(a[28]=i(": ")),s("mjx-container",b,[(n(),t("svg",T,a[25]||(a[25]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(646,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width:3;"></path></g></g></g></g>',1)]))),a[26]||(a[26]=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msub",null,[s("mi",null,"S"),s("mi",null,"x")])])],-1))]),a[29]||(a[29]=i(" operator for Spin-")),a[30]||(a[30]=s("code",null,"j",-1))])]),s("li",null,[s("p",null,[a[33]||(a[33]=s("a",{href:"/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.spin_Jy"},[s("code",null,"spin_Jy")],-1)),a[34]||(a[34]=i(": ")),s("mjx-container",y,[(n(),t("svg",v,a[31]||(a[31]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(646,-150) scale(0.707)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g></g></g></g>',1)]))),a[32]||(a[32]=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msub",null,[s("mi",null,"S"),s("mi",null,"y")])])],-1))]),a[35]||(a[35]=i(" operator for Spin-")),a[36]||(a[36]=s("code",null,"j",-1))])]),s("li",null,[s("p",null,[a[39]||(a[39]=s("a",{href:"/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.spin_Jz"},[s("code",null,"spin_Jz")],-1)),a[40]||(a[40]=i(": ")),s("mjx-container",x,[(n(),t("svg",E,a[37]||(a[37]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(646,-150) scale(0.707)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z" style="stroke-width:3;"></path></g></g></g></g>',1)]))),a[38]||(a[38]=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msub",null,[s("mi",null,"S"),s("mi",null,"z")])])],-1))]),a[41]||(a[41]=i(" operator for Spin-")),a[42]||(a[42]=s("code",null,"j",-1))])]),s("li",null,[s("p",null,[a[45]||(a[45]=s("a",{href:"/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.spin_Jm"},[s("code",null,"spin_Jm")],-1)),a[46]||(a[46]=i(": ")),s("mjx-container",C,[(n(),t("svg",f,a[43]||(a[43]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(646,-150) scale(0.707)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z" style="stroke-width:3;"></path></g></g></g></g>',1)]))),a[44]||(a[44]=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msub",null,[s("mi",null,"S"),s("mo",null,"−")])])],-1))]),a[47]||(a[47]=i(" operator for Spin-")),a[48]||(a[48]=s("code",null,"j",-1))])]),s("li",null,[s("p",null,[a[51]||(a[51]=s("a",{href:"/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.spin_Jp"},[s("code",null,"spin_Jp")],-1)),a[52]||(a[52]=i(": ")),s("mjx-container",w,[(n(),t("svg",j,a[49]||(a[49]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(646,-150) scale(0.707)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z" style="stroke-width:3;"></path></g></g></g></g>',1)]))),a[50]||(a[50]=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("msub",null,[s("mi",null,"S"),s("mo",null,"+")])])],-1))]),a[53]||(a[53]=i(" operator for Spin-")),a[54]||(a[54]=s("code",null,"j",-1))])]),s("li",null,[s("p",null,[a[57]||(a[57]=s("a",{href:"/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.spin_J_set"},[s("code",null,"spin_J_set")],-1)),a[58]||(a[58]=i(": a set of Spin-")),a[59]||(a[59]=s("code",null,"j",-1)),a[60]||(a[60]=i(" operators ")),s("mjx-container",F,[(n(),t("svg",B,a[55]||(a[55]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z" style="stroke-width:3;"></path></g><g data-mml-node="msub" transform="translate(389,0)"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(646,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(1489.5,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width:3;"></path></g><g data-mml-node="msub" transform="translate(1934.1,0)"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(646,-150) scale(0.707)"><path data-c="1D466" d="M21 287Q21 301 36 335T84 406T158 442Q199 442 224 419T250 355Q248 336 247 334Q247 331 231 288T198 191T182 105Q182 62 196 45T238 27Q261 27 281 38T312 61T339 94Q339 95 344 114T358 173T377 247Q415 397 419 404Q432 431 462 431Q475 431 483 424T494 412T496 403Q496 390 447 193T391 -23Q363 -106 294 -155T156 -205Q111 -205 77 -183T43 -117Q43 -95 50 -80T69 -58T89 -48T106 -45Q150 -45 150 -87Q150 -107 138 -122T115 -142T102 -147L99 -148Q101 -153 118 -160T152 -167H160Q177 -167 186 -165Q219 -156 247 -127T290 -65T313 -9T321 21L315 17Q309 13 296 6T270 -6Q250 -11 231 -11Q185 -11 150 11T104 82Q103 89 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(2976.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z" style="stroke-width:3;"></path></g><g data-mml-node="msub" transform="translate(3421.3,0)"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(646,-150) scale(0.707)"><path data-c="1D467" d="M347 338Q337 338 294 349T231 360Q211 360 197 356T174 346T162 335T155 324L153 320Q150 317 138 317Q117 317 117 325Q117 330 120 339Q133 378 163 406T229 440Q241 442 246 442Q271 442 291 425T329 392T367 375Q389 375 411 408T434 441Q435 442 449 442H462Q468 436 468 434Q468 430 463 420T449 399T432 377T418 358L411 349Q368 298 275 214T160 106L148 94L163 93Q185 93 227 82T290 71Q328 71 360 90T402 140Q406 149 409 151T424 153Q443 153 443 143Q443 138 442 134Q425 72 376 31T278 -11Q252 -11 232 6T193 40T155 57Q111 57 76 -3Q70 -11 59 -11H54H41Q35 -5 35 -2Q35 13 93 84Q132 129 225 214T340 322Q352 338 347 338Z" style="stroke-width:3;"></path></g></g><g data-mml-node="mo" transform="translate(4446.1,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z" style="stroke-width:3;"></path></g></g></g>',1)]))),a[56]||(a[56]=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mo",{stretchy:"false"},"("),s("msub",null,[s("mi",null,"S"),s("mi",null,"x")]),s("mo",null,","),s("msub",null,[s("mi",null,"S"),s("mi",null,"y")]),s("mo",null,","),s("msub",null,[s("mi",null,"S"),s("mi",null,"z")]),s("mo",{stretchy:"false"},")")])],-1))])])]),a[63]||(a[63]=e('<li><p><a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.fdestroy"><code>fdestroy</code></a>: fermion destruction operator</p></li><li><p><a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.fcreate"><code>fcreate</code></a>: fermion creation operator</p></li><li><p><a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.commutator"><code>commutator</code></a>: commutator or anti-commutator</p></li><li><p><a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.tunneling"><code>tunneling</code></a>: tunneling operator</p></li><li><p><a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.qft"><code>qft</code></a>: discrete quantum Fourier transform matrix</p></li>',5))]),a[77]||(a[77]=e(`<p>As an example, we give the output for a few of these functions:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">basis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Quantum Object:   type=Ket   dims=[5]   size=(5,)</span></span>
<span class="line"><span>5-element Vector{ComplexF64}:</span></span>
<span class="line"><span> 0.0 + 0.0im</span></span>
<span class="line"><span> 0.0 + 0.0im</span></span>
<span class="line"><span> 0.0 + 0.0im</span></span>
<span class="line"><span> 1.0 + 0.0im</span></span>
<span class="line"><span> 0.0 + 0.0im</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">coherent</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0.5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0.5im</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Quantum Object:   type=Ket   dims=[5]   size=(5,)</span></span>
<span class="line"><span>5-element Vector{ComplexF64}:</span></span>
<span class="line"><span>   0.7788017020755937 + 0.0im</span></span>
<span class="line"><span>   0.3893914169377068 - 0.3893914169377068im</span></span>
<span class="line"><span>                  0.0 - 0.27545895152395im</span></span>
<span class="line"><span>  -0.0789861710068352 - 0.0789861710068352im</span></span>
<span class="line"><span> -0.04314270829853118 + 0.0im</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">destroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Quantum Object:   type=Operator   dims=[4]   size=(4, 4)   ishermitian=false</span></span>
<span class="line"><span>4×4 SparseMatrixCSC{ComplexF64, Int64} with 3 stored entries:</span></span>
<span class="line"><span>     ⋅      1.0+0.0im          ⋅              ⋅    </span></span>
<span class="line"><span>     ⋅          ⋅      1.41421+0.0im          ⋅    </span></span>
<span class="line"><span>     ⋅          ⋅              ⋅      1.73205+0.0im</span></span>
<span class="line"><span>     ⋅          ⋅              ⋅              ⋅</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">sigmaz</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Quantum Object:   type=Operator   dims=[2]   size=(2, 2)   ishermitian=true</span></span>
<span class="line"><span>2×2 SparseMatrixCSC{ComplexF64, Int64} with 2 stored entries:</span></span>
<span class="line"><span> 1.0+0.0im       ⋅    </span></span>
<span class="line"><span>     ⋅      -1.0+0.0im</span></span></code></pre></div><h2 id="Qobj-fields-(attributes)" tabindex="-1">Qobj fields (attributes) <a class="header-anchor" href="#Qobj-fields-(attributes)" aria-label="Permalink to &quot;Qobj fields (attributes) {#Qobj-fields-(attributes)}&quot;">​</a></h2><p>We have seen that a structure <a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.QuantumObject"><code>QuantumObject</code></a> has several fields (attributes), such as <code>data</code>, <code>type</code> and <code>dims</code>. These can be accessed in the following way:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> destroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>4×4 SparseMatrixCSC{ComplexF64, Int64} with 3 stored entries:</span></span>
<span class="line"><span>     ⋅      1.0+0.0im          ⋅              ⋅    </span></span>
<span class="line"><span>     ⋅          ⋅      1.41421+0.0im          ⋅    </span></span>
<span class="line"><span>     ⋅          ⋅              ⋅      1.73205+0.0im</span></span>
<span class="line"><span>     ⋅          ⋅              ⋅              ⋅</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># the indexing in Julia starts from \`1\`</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1.4142135623730951 + 0.0im</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">type</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Operator</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">dims</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1-element SVector{1, Int64} with indices SOneTo(1):</span></span>
<span class="line"><span> 4</span></span></code></pre></div><p>In general, the properties of a <a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.QuantumObject"><code>QuantumObject</code></a> can be retrieved using several functions with inputting <a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.QuantumObject"><code>QuantumObject</code></a>:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">size</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>(4, 4)</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">shape</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># synonym of size(a)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>(4, 4)</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>16</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">eltype</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># element type</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ComplexF64 (alias for Complex{Float64})</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ket</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isbra</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># bra</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isoper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># operator</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isoperket</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># operator-ket</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isoperbra</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># operator-bra</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">issuper</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># super operator</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">ishermitian</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Hermitian</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isherm</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># synonym of ishermitian(a)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">issymmetric</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># symmetric</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isposdef</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># positive definite (and Hermitian)</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">println</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">isunitary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(a)) </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># unitary</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>false</span></span>
<span class="line"><span>false</span></span>
<span class="line"><span>true</span></span>
<span class="line"><span>false</span></span>
<span class="line"><span>false</span></span>
<span class="line"><span>false</span></span>
<span class="line"><span>false</span></span>
<span class="line"><span>false</span></span>
<span class="line"><span>false</span></span>
<span class="line"><span>false</span></span>
<span class="line"><span>false</span></span></code></pre></div><h3 id="data-conversions" tabindex="-1"><code>data</code> conversions <a class="header-anchor" href="#data-conversions" aria-label="Permalink to &quot;\`data\` conversions {#data-conversions}&quot;">​</a></h3><p>As we mentioned above, <code>QuantumObject.data</code> supports general <code>Julia</code> arrays. The conversion between different type of <code>QuantumObject.data</code> is done using the standard type-conversion for arrays in <code>Julia</code>:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v_d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> basis</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Quantum Object:   type=Ket   dims=[2]   size=(2,)</span></span>
<span class="line"><span>2-element Vector{ComplexF64}:</span></span>
<span class="line"><span> 1.0 + 0.0im</span></span>
<span class="line"><span> 0.0 + 0.0im</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Vector{Int64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v_d)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Quantum Object:   type=Ket   dims=[2]   size=(2,)</span></span>
<span class="line"><span>2-element Vector{Int64}:</span></span>
<span class="line"><span> 1</span></span>
<span class="line"><span> 0</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v_s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> SparseVector</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v_d)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Quantum Object:   type=Ket   dims=[2]   size=(2,)</span></span>
<span class="line"><span>2-element SparseVector{ComplexF64, Int64} with 1 stored entry:</span></span>
<span class="line"><span>  [1]  =  1.0+0.0im</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SparseVector{Float64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(v_s)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Quantum Object:   type=Ket   dims=[2]   size=(2,)</span></span>
<span class="line"><span>2-element SparseVector{Float64, Int64} with 1 stored entry:</span></span>
<span class="line"><span>  [1]  =  1.0</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x_s </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sigmax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Quantum Object:   type=Operator   dims=[2]   size=(2, 2)   ishermitian=true</span></span>
<span class="line"><span>2×2 SparseMatrixCSC{ComplexF64, Int64} with 2 stored entries:</span></span>
<span class="line"><span>     ⋅      1.0+0.0im</span></span>
<span class="line"><span> 1.0+0.0im      ⋅</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">SparseMatrixCSC{Int64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x_s)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Quantum Object:   type=Operator   dims=[2]   size=(2, 2)   ishermitian=true</span></span>
<span class="line"><span>2×2 SparseMatrixCSC{Int64, Int64} with 2 stored entries:</span></span>
<span class="line"><span> ⋅  1</span></span>
<span class="line"><span> 1  ⋅</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">Matrix{Float64}</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x_s)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Quantum Object:   type=Operator   dims=[2]   size=(2, 2)   ishermitian=true</span></span>
<span class="line"><span>2×2 Matrix{Float64}:</span></span>
<span class="line"><span> 0.0  1.0</span></span>
<span class="line"><span> 1.0  0.0</span></span></code></pre></div><p>To convert between dense and sparse arrays, one can also use <a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.dense_to_sparse"><code>dense_to_sparse</code></a> and <a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.sparse_to_dense"><code>sparse_to_dense</code></a>:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x_d </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sparse_to_dense</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x_s)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Quantum Object:   type=Operator   dims=[2]   size=(2, 2)   ishermitian=true</span></span>
<span class="line"><span>2×2 Matrix{ComplexF64}:</span></span>
<span class="line"><span> 0.0+0.0im  1.0+0.0im</span></span>
<span class="line"><span> 1.0+0.0im  0.0+0.0im</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">dense_to_sparse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(x_d)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Quantum Object:   type=Operator   dims=[2]   size=(2, 2)   ishermitian=true</span></span>
<span class="line"><span>2×2 SparseMatrixCSC{ComplexF64, Int64} with 2 stored entries:</span></span>
<span class="line"><span>     ⋅      1.0+0.0im</span></span>
<span class="line"><span> 1.0+0.0im      ⋅</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Convert to GPU arrays</p><p>See <a href="/QuantumToolbox.jl/v0.21.5/users_guide/extensions/cuda#doc:CUDA">CUDA extension</a> for more details.</p></div><p><code>QuantumToolbox</code> will do conversion when needed to keep everything working in any format. However these conversions could slow down computation and it is recommended to keep to one format family where possible.</p><h2 id="Qobj-math" tabindex="-1">Qobj math <a class="header-anchor" href="#Qobj-math" aria-label="Permalink to &quot;Qobj math {#Qobj-math}&quot;">​</a></h2><p>The rules for mathematical operations on <a href="/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.QuantumObject"><code>QuantumObject</code></a> are similar to the standard scalar, vector, and matrix arithmetic:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> destroy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Quantum Object:   type=Operator   dims=[4]   size=(4, 4)   ishermitian=false</span></span>
<span class="line"><span>4×4 SparseMatrixCSC{ComplexF64, Int64} with 3 stored entries:</span></span>
<span class="line"><span>     ⋅      1.0+0.0im          ⋅              ⋅    </span></span>
<span class="line"><span>     ⋅          ⋅      1.41421+0.0im          ⋅    </span></span>
<span class="line"><span>     ⋅          ⋅              ⋅      1.73205+0.0im</span></span>
<span class="line"><span>     ⋅          ⋅              ⋅              ⋅</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # synonym of adjoint(a)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Quantum Object:   type=Operator   dims=[4]   size=(4, 4)   ishermitian=false</span></span>
<span class="line"><span>4×4 Adjoint{ComplexF64, SparseMatrixCSC{ComplexF64, Int64}} with 3 stored entries:</span></span>
<span class="line"><span>     ⋅              ⋅              ⋅          ⋅    </span></span>
<span class="line"><span> 1.0-0.0im          ⋅              ⋅          ⋅    </span></span>
<span class="line"><span>     ⋅      1.41421-0.0im          ⋅          ⋅    </span></span>
<span class="line"><span>     ⋅              ⋅      1.73205-0.0im      ⋅</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Quantum Object:   type=Operator   dims=[4]   size=(4, 4)   ishermitian=false</span></span>
<span class="line"><span>4×4 SparseMatrixCSC{ComplexF64, Int64} with 7 stored entries:</span></span>
<span class="line"><span> 5.0+0.0im  1.0+0.0im          ⋅              ⋅    </span></span>
<span class="line"><span>     ⋅      5.0+0.0im  1.41421+0.0im          ⋅    </span></span>
<span class="line"><span>     ⋅          ⋅          5.0+0.0im  1.73205+0.0im</span></span>
<span class="line"><span>     ⋅          ⋅              ⋅          5.0+0.0im</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Quantum Object:   type=Operator   dims=[4]   size=(4, 4)   ishermitian=true</span></span>
<span class="line"><span>4×4 SparseMatrixCSC{ComplexF64, Int64} with 3 stored entries:</span></span>
<span class="line"><span>     ⋅          ⋅          ⋅          ⋅    </span></span>
<span class="line"><span>     ⋅      1.0+0.0im      ⋅          ⋅    </span></span>
<span class="line"><span>     ⋅          ⋅      2.0+0.0im      ⋅    </span></span>
<span class="line"><span>     ⋅          ⋅          ⋅      3.0+0.0im</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Quantum Object:   type=Operator   dims=[4]   size=(4, 4)   ishermitian=false</span></span>
<span class="line"><span>4×4 SparseMatrixCSC{ComplexF64, Int64} with 1 stored entry:</span></span>
<span class="line"><span>     ⋅          ⋅          ⋅      2.44949+0.0im</span></span>
<span class="line"><span>     ⋅          ⋅          ⋅              ⋅    </span></span>
<span class="line"><span>     ⋅          ⋅          ⋅              ⋅    </span></span>
<span class="line"><span>     ⋅          ⋅          ⋅              ⋅</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sigmax</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Quantum Object:   type=Operator   dims=[2]   size=(2, 2)   ishermitian=true</span></span>
<span class="line"><span>2×2 SparseMatrixCSC{ComplexF64, Int64} with 2 stored entries:</span></span>
<span class="line"><span>     ⋅      1.0+0.0im</span></span>
<span class="line"><span> 1.0+0.0im      ⋅</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> sqrt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Quantum Object:   type=Operator   dims=[2]   size=(2, 2)   ishermitian=true</span></span>
<span class="line"><span>2×2 SparseMatrixCSC{ComplexF64, Int64} with 2 stored entries:</span></span>
<span class="line"><span>          ⋅      0.707107+0.0im</span></span>
<span class="line"><span> 0.707107+0.0im           ⋅</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>true</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># type \\approx + &lt;TAB&gt; to get symbol ≈</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">x </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">^</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ≈</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>true</span></span></code></pre></div><p>Of course, like matrices, multiplying two objects of incompatible <code>dims</code> or <code>size</code> throws an error:</p><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">julia</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">ERROR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DimensionMismatch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> The two quantum objects don</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t have the same Hilbert dimension.</span></span></code></pre></div>`,75)),s("p",null,[a[66]||(a[66]=i("Note that there is a special case for multiplying ")),a[67]||(a[67]=s("a",{href:"/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.Ket"},[s("code",null,"Ket")],-1)),a[68]||(a[68]=i(" and ")),a[69]||(a[69]=s("a",{href:"/QuantumToolbox.jl/v0.21.5/resources/api#QuantumToolbox.Bra"},[s("code",null,"Bra")],-1)),a[70]||(a[70]=i(", which results in outer product ")),s("mjx-container",M,[(n(),t("svg",D,a[64]||(a[64]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(278,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(850,0)"><path data-c="27E9" d="M55 732Q56 739 61 744T75 750Q85 750 92 740Q95 733 186 494T278 250T187 6T92 -240Q85 -250 75 -250Q67 -250 62 -245T55 -232Q55 -227 145 11Q236 248 236 250T145 489Q55 727 55 732Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(1461.2,0)"><path data-c="2297" d="M56 250Q56 394 156 488T384 583Q530 583 626 485T722 250Q722 110 625 14T390 -83Q249 -83 153 14T56 250ZM582 471Q531 510 496 523Q446 542 381 542Q324 542 272 519T196 471L389 278L485 375L582 471ZM167 442Q95 362 95 250Q95 137 167 58L359 250L167 442ZM610 58Q682 138 682 250Q682 363 610 442L418 250L610 58ZM196 29Q209 16 230 2T295 -27T388 -42Q409 -42 429 -40T465 -33T496 -23T522 -11T544 1T561 13T574 22T582 29L388 222L196 29Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(2461.4,0)"><path data-c="27E8" d="M333 -232Q332 -239 327 -244T313 -250Q303 -250 296 -240Q293 -233 202 6T110 250T201 494T296 740Q299 745 306 749L309 750Q312 750 313 750Q331 750 333 732Q333 727 243 489Q152 252 152 250T243 11Q333 -227 333 -232Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(2850.4,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(3335.4,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" style="stroke-width:3;"></path></g></g></g>',1)]))),a[65]||(a[65]=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|"),s("mi",null,"u"),s("mo",{fence:"false",stretchy:"false"},"⟩"),s("mo",null,"⊗"),s("mo",{fence:"false",stretchy:"false"},"⟨"),s("mi",null,"v"),s("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|")])],-1))]),a[71]||(a[71]=i(":"))]),a[78]||(a[78]=e(`<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">u </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Qobj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Quantum Object:   type=Ket   dims=[3]   size=(3,)</span></span>
<span class="line"><span>3-element Vector{Int64}:</span></span>
<span class="line"><span> 1</span></span>
<span class="line"><span> 2</span></span>
<span class="line"><span> 3</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> Qobj</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&#39;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Quantum Object:   type=Bra   dims=[3]   size=(1, 3)</span></span>
<span class="line"><span>1×3 adjoint(::Vector{Int64}) with eltype Int64:</span></span>
<span class="line"><span> 4  5  6</span></span></code></pre></div><div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">u </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&#39;</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>Quantum Object:   type=Operator   dims=[3]   size=(3, 3)   ishermitian=false</span></span>
<span class="line"><span>3×3 Matrix{Int64}:</span></span>
<span class="line"><span>  4   5   6</span></span>
<span class="line"><span>  8  10  12</span></span>
<span class="line"><span> 12  15  18</span></span></code></pre></div>`,6)),s("p",null,[a[74]||(a[74]=i("Of course, if you switch the order of multiplication, it becomes inner product ")),s("mjx-container",A,[(n(),t("svg",S,a[72]||(a[72]=[e('<g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="27E8" d="M333 -232Q332 -239 327 -244T313 -250Q303 -250 296 -240Q293 -233 202 6T110 250T201 494T296 740Q299 745 306 749L309 750Q312 750 313 750Q331 750 333 732Q333 727 243 489Q152 252 152 250T243 11Q333 -227 333 -232Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(874,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z" style="stroke-width:3;"></path></g><g data-mml-node="mi" transform="translate(1152,0)"><path data-c="1D462" d="M21 287Q21 295 30 318T55 370T99 420T158 442Q204 442 227 417T250 358Q250 340 216 246T182 105Q182 62 196 45T238 27T291 44T328 78L339 95Q341 99 377 247Q407 367 413 387T427 416Q444 431 463 431Q480 431 488 421T496 402L420 84Q419 79 419 68Q419 43 426 35T447 26Q469 29 482 57T512 145Q514 153 532 153Q551 153 551 144Q550 139 549 130T540 98T523 55T498 17T462 -8Q454 -10 438 -10Q372 -10 347 46Q345 45 336 36T318 21T296 6T267 -6T233 -11Q189 -11 155 7Q103 38 103 113Q103 170 138 262T173 379Q173 380 173 381Q173 390 173 393T169 400T158 404H154Q131 404 112 385T82 344T65 302T57 280Q55 278 41 278H27Q21 284 21 287Z" style="stroke-width:3;"></path></g><g data-mml-node="mo" transform="translate(1724,0)"><path data-c="27E9" d="M55 732Q56 739 61 744T75 750Q85 750 92 740Q95 733 186 494T278 250T187 6T92 -240Q85 -250 75 -250Q67 -250 62 -245T55 -232Q55 -227 145 11Q236 248 236 250T145 489Q55 727 55 732Z" style="stroke-width:3;"></path></g></g></g>',1)]))),a[73]||(a[73]=s("mjx-assistive-mml",{unselectable:"on",display:"inline",style:{top:"0px",left:"0px",clip:"rect(1px, 1px, 1px, 1px)","-webkit-touch-callout":"none","-webkit-user-select":"none","-khtml-user-select":"none","-moz-user-select":"none","-ms-user-select":"none","user-select":"none",position:"absolute",padding:"1px 0px 0px 0px",border:"0px",display:"block",width:"auto",overflow:"hidden"}},[s("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[s("mo",{fence:"false",stretchy:"false"},"⟨"),s("mi",null,"v"),s("mo",{"data-mjx-texclass":"ORD",stretchy:"false"},"|"),s("mi",null,"u"),s("mo",{fence:"false",stretchy:"false"},"⟩")])],-1))]),a[75]||(a[75]=i(":"))]),a[79]||(a[79]=e('<div class="language-julia vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">julia</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">v</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> u</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>32</span></span></code></pre></div>',2))])}const I=l(p,[["render",H]]);export{P as __pageData,I as default};
